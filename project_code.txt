Project Structure:

.
├── .gitattributes
├── .gitignore
├── README.md
├── acoustic_model.py
├── analyze_match.py
├── audio_labeling_tools.py
├── input_videos
│   └── image.png
├── label_app.py
├── label_config.py
├── models
│   ├── README.md
│   ├── ball_track_model.pt
│   ├── bounce_model.cbm
│   └── court_model.pt
├── notebooks
│   └── train_accoustic_classifier.ipynb
├── quick_prepare.ps1
├── requirements.txt
└── video_models
    ├── __init__.py
    ├── ball_detector.py
    ├── bounce_detector.py
    ├── court_detection_net.py
    ├── court_reference.py
    ├── homography.py
    ├── person_detector.py
    ├── postprocess.py
    ├── tracknet.py
    └── utils.py

5 directories, 26 files

-- PATH: .gitattributes --
# Auto detect text files and perform LF normalization
* text=auto

-- PATH: .gitignore --
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so
*.pth
# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

*.mp4
*.wav
*.csv
*.png

-- PATH: README.md --
# Tennis Acoustic Analyzer

This project provides tools for preparing audio clips and labeling tennis sounds. A new `analyze_match.py` script combines an acoustic hit detector with video models to process full matches.

## Quick start

```bash
# prepare clips from a video
./quick_prepare.ps1 ./input_videos/clip.mp4

# run labeling app
streamlit run label_app.py

# analyze a full match
python analyze_match.py path/to/video.mp4 --models_dir models --output_csv results.csv
```

The `models` directory should contain pretrained weights:

- `acoustic_classifier.pth`
- `ball_track_model.pth`
- `court_model.pth`
- `bounce_model.cbm`

-- PATH: acoustic_model.py --
import torch
import torch.nn as nn
from pathlib import Path

MAX_T = 16

class FourClassNet(nn.Module):
    def __init__(self):
        super().__init__()
        self.conv = nn.Sequential(
            nn.Conv2d(1, 24, (5, 5), padding=2),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Conv2d(24, 48, (5, 5), padding=2),
            nn.ReLU(),
            nn.MaxPool2d(2),
            nn.Conv2d(48, 48, (5, 5), padding=2),
            nn.ReLU(),
        )
        self.fc = nn.Sequential(
            nn.Flatten(),
            nn.Linear(48 * (75 // 4) * (MAX_T // 4), 64),
            nn.ReLU(),
            nn.Linear(64, 64),
            nn.ReLU(),
            nn.Linear(64, 4),
        )

    def forward(self, x: torch.Tensor) -> torch.Tensor:
        return self.fc(self.conv(x))


def load_acoustic_model(path: Path) -> nn.Module:
    """Load the acoustic classifier and ensure a model instance is returned."""
    obj = torch.load(path, map_location="cpu")

    if isinstance(obj, nn.Module):
        model = obj
    elif isinstance(obj, dict):
        if "state_dict" in obj:
            state = obj["state_dict"]
        elif "model_state_dict" in obj:
            state = obj["model_state_dict"]
        else:
            state = obj
        model = FourClassNet()
        model.load_state_dict(state)
    else:
        raise TypeError(f"Unsupported model format: {type(obj)}")

    model.eval()
    return model

-- PATH: analyze_match.py --
import argparse
from pathlib import Path
import tempfile
import csv

import librosa
import numpy as np
import torch
from tqdm import tqdm

from audio_labeling_tools import run_ffmpeg_extract, detect_onsets
from acoustic_model import load_acoustic_model, MAX_T

# video processing modules
from video_models.ball_detector import BallDetector
from video_models.court_detection_net import CourtDetectorNet
from video_models.person_detector import PersonDetector
from video_models.bounce_detector import BounceDetector

def predict_hits(audio_path: Path, model_path: Path) -> list[float]:
    y, sr = librosa.load(str(audio_path), sr=48_000, mono=True)
    onsets = detect_onsets(y, sr, hop_len=int(sr*0.025), delta=0.2, min_gap_sec=0.3)
    model = load_acoustic_model(model_path)
    pre_ms = 200
    post_ms = 200
    hits = []
    for s in onsets:
        start = max(0, s - int(pre_ms*sr/1000))
        end = min(len(y), s + int(post_ms*sr/1000))
        clip = y[start:end]
        feat = librosa.feature.mfcc(
            y=clip,
            sr=sr,
            n_mfcc=25,
            n_fft=int(sr * 0.02),
            hop_length=int(sr * 0.02),
        )
        d1 = librosa.feature.delta(feat, order=1)
        d2 = librosa.feature.delta(feat, order=2)
        feat = np.vstack([feat, d1, d2])  # shape (75, T)
        feat = feat[:, :MAX_T]
        if feat.shape[1] < MAX_T:
            pad = np.zeros((feat.shape[0], MAX_T - feat.shape[1]))
            feat = np.hstack([feat, pad])
        x = torch.tensor(feat).unsqueeze(0).unsqueeze(0).float()
        with torch.no_grad():
            prob = torch.softmax(model(x), dim=1)[0, 0].item()
        if prob > 0.5:
            hits.append(start/sr)
    return hits


def process_video(video_path: Path, models_dir: Path):
    frames, fps = read_video(video_path)
    device = "cuda" if torch.cuda.is_available() else "cpu"
    ball = BallDetector(models_dir / "ball_track_model.pt", device)
    court = CourtDetectorNet(models_dir / "court_model.pt", device)
    bounce = BounceDetector(models_dir / "bounce_model.cbm")
    persons = PersonDetector(device=device)

    scenes = scene_detect(str(video_path))
    ball_track = ball.infer_model(frames)
    matrices, kps = court.infer_model(frames)
    persons_top, persons_bottom = persons.track_players(frames, matrices, filter_players=False)
    x_ball = [b[0] for b in ball_track]
    y_ball = [b[1] for b in ball_track]
    bounces = bounce.predict(x_ball, y_ball)

    return {
        "fps": fps,
        "ball_track": ball_track,
        "matrices": matrices,
        "kps": kps,
        "persons_top": persons_top,
        "persons_bottom": persons_bottom,
        "bounces": bounces,
        "scenes": scenes,
    }


def read_video(path_video: Path):
    import cv2
    cap = cv2.VideoCapture(str(path_video))
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    frames = []
    while cap.isOpened():
        ret, frame = cap.read()
        if ret:
            frames.append(frame)
        else:
            break
    cap.release()
    return frames, fps

from video_models.utils import scene_detect


def analyze(video_path: Path, models_dir: Path, output_csv: Path):
    with tempfile.TemporaryDirectory() as tmp:
        audio_path = Path(tmp)/"audio.wav"
        run_ffmpeg_extract(video_path, audio_path)
        hits = predict_hits(audio_path, models_dir / "acoustic_classifier.pth")

    video_data = process_video(video_path, models_dir)

    rows = []
    for t in hits:
        sec = int(t*video_data["fps"])
        hit_frame = min(sec, len(video_data["ball_track"])-1)
        who = "A" if video_data["persons_bottom"][hit_frame] else "B"
        rows.append({"time": t, "player": who})

    with output_csv.open("w", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=["time", "player"])
        writer.writeheader()
        writer.writerows(rows)


if __name__ == "__main__":
    p = argparse.ArgumentParser(description="Tennis match analyzer")
    p.add_argument("input_video", type=Path)
    p.add_argument("--models_dir", type=Path, default=Path("models"))
    p.add_argument("--output_csv", type=Path, default=Path("results.csv"))
    args = p.parse_args()
    analyze(args.input_video, args.models_dir, args.output_csv)

-- PATH: audio_labeling_tools.py --
"""
audio_labeling_tools.py — prepare audio (and optional video) clips
==================================================================

* extract : pull mono 48 kHz WAV from a video (ffmpeg)
* slice   : detect peaks/onsets, cut fixed-length WAV (and MP4) clips,
            and write a CSV ready for labelling.

run quick_prepare.ps1 for easy launch of the application. 
"""

from __future__ import annotations

import argparse
import csv
import subprocess
from pathlib import Path
from typing import List

import librosa
import numpy as np
import soundfile as sf
from tqdm import tqdm

# ───────────────────────── ffmpeg helpers ────────────────────────────────
def run_ffmpeg_extract(
    input_path: Path, output_path: Path, sr: int = 48_000, mono: bool = True
) -> None:
    if output_path.exists():
        raise FileExistsError(f"Refusing to overwrite existing file {output_path}")
    subprocess.run(
        [
            "ffmpeg", "-y", "-i", str(input_path),
            "-ac", "1" if mono else "2",
            "-ar", str(sr),
            str(output_path),
        ],
        check=True,
    )


def ffmpeg_slice_video(
    src: Path,
    dst: Path,
    start_sec: float,
    duration_sec: float,
    codec: str = "libx264",
    scale: str | None = "-1:360",
) -> None:
    vf = f"scale={scale}" if scale else "null"
    subprocess.run(
        [
            "ffmpeg", "-y",
            "-ss", f"{start_sec:.3f}", "-t", f"{duration_sec:.3f}",
            "-i", str(src),
            "-vf", vf,
            "-c:v", codec,
            "-c:a", "aac", "-ac", "1", "-ar", "48000",
            "-loglevel", "error",
            str(dst),
        ],
        check=True,
    )

# ─────────────────────── onset-detector helper ───────────────────────────
def detect_onsets(
    y: np.ndarray,
    sr: int,
    hop_len: int,
    delta: float,
    min_gap_sec: float,
) -> List[int]:
    """Return sample indices of spectral-flux onsets spaced ≥ *min_gap_sec*."""
    onsets = librosa.onset.onset_detect(
        y=y,
        sr=sr,
        hop_length=hop_len,
        backtrack=True,
        pre_max=20, post_max=20,
        pre_avg=100, post_avg=100,
        delta=delta,
        units="samples",
    )
    gap = int(min_gap_sec * sr)
    filtered: List[int] = []
    last = -gap
    for s in sorted(onsets):
        if s - last >= gap:
            filtered.append(s)
            last = s
    return filtered

# ───────────────────────── CLI handlers ──────────────────────────────────
def cmd_extract(args: argparse.Namespace) -> None:
    run_ffmpeg_extract(
        Path(args.input).expanduser(),
        Path(args.output).expanduser(),
        sr=args.sr,
        mono=not args.stereo,
    )
    print("✅ WAV extracted")


def cmd_slice(args: argparse.Namespace) -> None:
    in_path  = Path(args.input)
    out_dir  = Path(args.output_dir)
    csv_path = Path(args.csv)
    out_dir.mkdir(parents=True, exist_ok=True)
    csv_path.parent.mkdir(parents=True, exist_ok=True)

    # ── load WAV ─────────────────────────────────────────────────────────
    y, sr_native = librosa.load(in_path, sr=None, mono=True)
    sr = args.sr or sr_native
    if sr != sr_native:
        y = librosa.resample(y, sr_native, sr)

    hop = int(sr * args.hop_ms / 1000)
    win = int(sr * args.win_ms / 1000)

    # spacing between clips
    gap_ms = args.min_gap_ms if args.min_gap_ms is not None else (args.pre_ms + args.post_ms)
    min_gap_sec = gap_ms / 1000

    # ── detect peaks / onsets ────────────────────────────────────────────
    if args.method == "rms":
        env = librosa.feature.rms(y=y, frame_length=win, hop_length=hop, center=True)[0]
        env_norm = env / (env.max() or 1.0)
        wait_frames = max(3, int(gap_ms / args.hop_ms))
        peaks = librosa.util.peak_pick(
            env_norm,
            pre_max=3, post_max=3,
            pre_avg=3, post_avg=3,
            delta=args.threshold,
            wait=wait_frames,
        )
        sample_peaks = [int(p * hop + win / 2) for p in peaks]
    else:  # onset
        sample_peaks = detect_onsets(
            y, sr,
            hop_len=hop,
            delta=args.delta,
            min_gap_sec=min_gap_sec,
        )

    if not sample_peaks:
        print("No peaks detected – try a lower --delta or --threshold.")
        return

    # ── slice around peaks ───────────────────────────────────────────────
    pre  = int(args.pre_ms  * sr / 1000)
    post = int(args.post_ms * sr / 1000)

    csv_rows = []
    video_src = Path(args.video) if (args.export_video and args.video) else None

    print(f"Slicing {len(sample_peaks)} clips …")
    for idx, p in tqdm(list(enumerate(sample_peaks, 1)), total=len(sample_peaks)):
        start = max(p - pre, 0)
        end   = min(p + post, len(y))
        clip  = y[start:end]

        clip_duration_sec = (end - start) / sr

        wav_name = f"clip_{idx:05d}.wav"
        sf.write(out_dir / wav_name, clip, sr)

        clip_start_sec = start / sr
        video_name = ""
        if video_src:
            video_name = wav_name.replace(".wav", ".mp4")
            ffmpeg_slice_video(
                src=video_src,
                dst=out_dir / video_name,
                start_sec=clip_start_sec,
                duration_sec=clip_duration_sec,
                codec=args.video_codec,
                scale=args.scale,
            )

        csv_rows.append([wav_name, p, f"{clip_start_sec:.3f}", "", video_name])

    # ── write CSV ────────────────────────────────────────────────────────
    with csv_path.open("w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["clip_id", "peak_sample", "clip_start_sec", "label", "video_id"])
        writer.writerows(csv_rows)

    print(f"✅ {len(csv_rows)} clips + CSV written to {out_dir}")

# ───────────────────────── argument parser ───────────────────────────────
def build_arg_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(description="Audio (and optional video) clip slicer")
    sub = p.add_subparsers(dest="command", required=True)

    # extract
    ext = sub.add_parser("extract", help="Extract mono WAV from a video")
    ext.add_argument("--input", required=True)
    ext.add_argument("--output", required=True)
    ext.add_argument("--sr", type=int, default=48_000)
    ext.add_argument("--stereo", action="store_true")
    ext.set_defaults(func=cmd_extract)

    # slice
    slc = sub.add_parser("slice", help="Detect peaks/onsets and cut clips")
    slc.add_argument("--input", required=True)
    slc.add_argument("--output_dir", required=True)
    slc.add_argument("--csv", required=True)

    # window + detection
    slc.add_argument("--method", choices=["rms", "onset"], default="onset",
                     help="Detection method (default: onset)")
    slc.add_argument("--delta", type=float, default=0.2,
                     help="Spectral-flux onset threshold (lower = more peaks)")
    slc.add_argument("--threshold", type=float, default=0.35,
                     help="RMS peak threshold (used only when --method rms)")
    slc.add_argument("--min_gap_ms", type=float,
                     help="Minimum spacing between clips in ms "
                          "(default = pre_ms + post_ms)")
    slc.add_argument("--sr", type=int, default=0)
    slc.add_argument("--hop_ms",  type=float, default=25.0)
    slc.add_argument("--win_ms",  type=float, default=50.0)
    slc.add_argument("--pre_ms",  type=float, default=200.0)
    slc.add_argument("--post_ms", type=float, default=200.0)

    # video
    slc.add_argument("--video", help="Original full-length video file")
    slc.add_argument("--export_video", action="store_true", help="Write MP4 clip too")
    slc.add_argument("--video_codec", default="libx264")
    slc.add_argument("--scale", default="-1:360")

    slc.set_defaults(func=cmd_slice)
    return p

# ───────────────────────── entry-point ────────────────────────────────────
if __name__ == "__main__":
    args = build_arg_parser().parse_args()
    args.func(args)

-- PATH: input_videos/image.png --
(binary file omitted)

-- PATH: label_app.py --
import shutil
from datetime import datetime
from pathlib import Path
import pandas as pd
import soundfile as sf
import streamlit as st
import label_config as cfg

# ───────────────────────────── helpers ────────────────────────────────────
def safe_rerun():
    if hasattr(st, "rerun"):
        st.rerun()
    else:
        st.experimental_rerun()

def backup_csv(src: Path, session: str):
    ts = datetime.now().strftime("%Y%m%d-%H%M%S")
    dst = BACKUP_DIR / f"{session}_{ts}.csv"
    shutil.copy(src, dst)

# ───────────────────────────── choose session ─────────────────────────────
CLIPS_ROOT = Path(cfg.CLIPS_ROOT)
video_dirs = sorted(p for p in CLIPS_ROOT.iterdir() if (p / "slices.csv").exists())
if not video_dirs:
    st.error(f"No folders with slices.csv inside {CLIPS_ROOT}")
    st.stop()

with st.sidebar:
    session_dir = st.selectbox("🎞  Choose session", video_dirs, format_func=lambda p: p.name)
    auto_loop   = st.checkbox("Loop / auto-play video", value=True)

CSV_PATH   = session_dir / "slices.csv"
BACKUP_DIR = Path(cfg.BACKUP_DIR); BACKUP_DIR.mkdir(exist_ok=True)

# ───────────────────────────── load table ────────────────────────────────
df = pd.read_csv(CSV_PATH)
df["label"] = df["label"].fillna("").astype(str)

unlab      = df[df["label"] == ""]
total, done = len(df), len(df) - len(unlab)

st.title("🎾 Tennis-Sound Labeller")
st.caption(f"Session **{session_dir.name}** — {done}/{total} clips ({done/total:.1%})")
st.progress(done / total)

if unlab.empty:
    st.success("🎉  All clips in this session are done!")
    st.stop()

row       = unlab.iloc[0]
clip_id   = row["clip_id"]
wav_path  = session_dir / clip_id
mp4_path  = (session_dir / row["video_id"]) if row["video_id"] else wav_path.with_suffix(".mp4")

# remember which clip is on screen
st.session_state["current_clip_id"] = clip_id
# ───────────────────────────── playback ──────────────────────────────────
st.markdown(f"Now labelling: **{clip_id}**")

if mp4_path.exists():
    st.video(str(mp4_path))          # normal Streamlit player

    # Global hot-key: press **P** anywhere to play / pause the clip -> =makes it much easier o label everything
    st.components.v1.html(
        """
        <script>
          (() => {
            // Do nothing while typing in inputs
            function typingIn(el) {
              const t = (el.tagName || '').toLowerCase();
              return t === 'input' || t === 'textarea' || el.isContentEditable;
            }

            window.parent.document.addEventListener(
              'keydown',
              (e) => {
                if (e.key.toLowerCase() !== 'p' || typingIn(e.target)) return;
                e.preventDefault();      // stop Streamlit widgets seeing the key
                e.stopPropagation();

                const vid = window.parent.document.querySelector('video');
                if (vid) {
                  (vid.paused ? vid.play() : vid.pause()).catch(() => {});
                }
              },
              true      // capture phase → runs before any widget handler
            );
          })();
        </script>
        """,
        height=0,
    )

    st.caption("Press **P** anywhere to play / pause.")
else:
    audio, sr = sf.read(wav_path, dtype="float32")
    st.audio(audio, format="audio/wav", sample_rate=sr)


# ───────────────────────────── label controls ────────────────────────────
cols   = st.columns(len(cfg.LABELS))
choice = None
for c, lab in zip(cols, cfg.LABELS):
    if c.button(lab):
        choice = lab

# ───────────────────────────── save / advance ────────────────────────────
if choice:
    backup_csv(CSV_PATH, session_dir.name)
    sel_id = st.session_state["current_clip_id"]
    df.loc[df["clip_id"] == sel_id, "label"] = choice
    df.to_csv(CSV_PATH, index=False)
    safe_rerun()

# ───────────────────────────── undo panel ────────────────────────────────
with st.expander("Undo last label"):
    done_rows = df[df["label"] != ""]
    if done_rows.empty:
        st.write("Nothing to undo yet.")
    else:
        last = done_rows.tail(1).iloc[0]
        st.write(last["clip_id"], "→", last["label"])
        if st.button("Clear this label"):
            backup_csv(CSV_PATH, session_dir.name)
            df.loc[df["clip_id"] == last["clip_id"], "label"] = ""
            df.to_csv(CSV_PATH, index=False)
            safe_rerun()

-- PATH: label_config.py --
LABELS = [
    "hit",
    "squeak",
    "applause",
    "umpire_call",
    "out_call",
    "commentator",
    "other",
]

# Root directory that contains *one sub-folder per video*.
# Each sub-folder has `slices.csv` and the WAV clips.
CLIPS_ROOT = "data/clips"

# Where timestamped safety copies of every edited CSV go
BACKUP_DIR = "csv_backups"

-- PATH: models/README.md --
Model files go here

-- PATH: models/ball_track_model.pt --
(binary file omitted)

-- PATH: models/bounce_model.cbm --
(binary file omitted)

-- PATH: models/court_model.pt --
(binary file omitted)

-- PATH: notebooks/train_accoustic_classifier.ipynb --
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "756e2653",
   "metadata": {},
   "source": [
    "### Import of libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "312b2864",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pathlib as pl, pandas as pd, numpy as np\n",
    "import librosa, librosa.display, matplotlib.pyplot as plt\n",
    "import torch, torch.nn as nn\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f79d62a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "CLIPS_ROOT = pl.Path(\"../data/clips\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d3081033",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "label4\n",
      "commentator    2109\n",
      "hit            1352\n",
      "other           410\n",
      "squeak          248\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "SESSION_NAME = \"fullmatch_1_2\"        \n",
    "sess = CLIPS_ROOT / SESSION_NAME\n",
    "csv  = sess / \"slices.csv\"\n",
    "wanted = {\"hit\", \"squeak\", \"commentator\"}  # everything else → \"other\"\n",
    "\n",
    "if not csv.exists():\n",
    "    raise FileNotFoundError(f\"{csv} not found\")\n",
    "\n",
    "df = pd.read_csv(csv)\n",
    "df[\"wav_path\"] = df[\"clip_id\"].apply(lambda x: sess / x)\n",
    "df[\"label4\"]   = df[\"label\"].where(df[\"label\"].isin(wanted), \"other\")\n",
    "\n",
    "all_df = df[[\"wav_path\", \"label4\"]]\n",
    "\n",
    "print(all_df[\"label4\"].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7c1a1e92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "all_df[\"label4\"].value_counts().plot.bar()\n",
    "plt.ylabel(\"clips\"); plt.title(\"Class distribution\"); plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0fb5e77d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def mfcc_stack(y, sr, n_mfcc=25):\n",
    "    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=n_mfcc,\n",
    "                                n_fft=int(sr*0.02), hop_length=int(sr*0.02))\n",
    "    d1   = librosa.feature.delta(mfcc, order=1)\n",
    "    d2   = librosa.feature.delta(mfcc, order=2)\n",
    "    return np.vstack([mfcc, d1, d2])            # (75, T)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9543e50d",
   "metadata": {},
   "outputs": [],
   "source": [
    "label2idx = {\"hit\":0, \"squeak\":1, \"commentator\":2, \"other\":3}\n",
    "\n",
    "X, y = [], []\n",
    "for path, lab in zip(all_df.wav_path, all_df.label4):\n",
    "    ysig, sr = librosa.load(path, sr=None)\n",
    "    X.append(mfcc_stack(ysig, sr))\n",
    "    y.append(label2idx[lab])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fd0dc042",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_tr, X_va, y_tr, y_va, idx_tr, idx_va = train_test_split(\n",
    "    X, y, all_df.index,                    #  << keep original indices\n",
    "    test_size=0.2, stratify=y, random_state=0)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5e9a684c",
   "metadata": {},
   "outputs": [],
   "source": [
    "MAX_T = 16        # fits every 0.30-s clip (15 real frames + 1 pad)\n",
    "\n",
    "def pad(feat):\n",
    "    feat = feat[:, :MAX_T]\n",
    "    if feat.shape[1] < MAX_T:\n",
    "        pad = np.zeros((75, MAX_T - feat.shape[1]))\n",
    "        feat = np.hstack([feat, pad])\n",
    "    return feat[None]          # shape (1, 75, MAX_T)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0a35e1a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MFCCset(Dataset):\n",
    "    def __init__(self, feats, labels):\n",
    "        self.X = [pad(f) for f in feats]\n",
    "        self.y = labels\n",
    "    def __len__(self):  return len(self.X)\n",
    "    def __getitem__(self, i):\n",
    "        return torch.tensor(self.X[i], dtype=torch.float32), self.y[i]\n",
    "\n",
    "train_loader = DataLoader(MFCCset(X_tr, y_tr), batch_size=32, shuffle=True)\n",
    "val_loader   = DataLoader(MFCCset(X_va, y_va), batch_size=64)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5eb60403",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FourClassNet(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.conv = nn.Sequential(\n",
    "            nn.Conv2d(1, 24, (5,5), padding=2), nn.ReLU(), nn.MaxPool2d(2),\n",
    "            nn.Conv2d(24,48,(5,5), padding=2), nn.ReLU(), nn.MaxPool2d(2),\n",
    "            nn.Conv2d(48,48,(5,5), padding=2), nn.ReLU(),\n",
    "        )\n",
    "        self.fc = nn.Sequential(\n",
    "            nn.Flatten(),\n",
    "            # ----------▼ only this line needs the new MAX_T ▼----------\n",
    "            nn.Linear(48 * (75//4) * (MAX_T//4), 64), nn.ReLU(),\n",
    "            nn.Linear(64,64), nn.ReLU(),\n",
    "            nn.Linear(64, 4)\n",
    "        )\n",
    "    def forward(self, x):\n",
    "        return self.fc(self.conv(x))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b458f678",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "class weights: [1.5591497421264648, 8.520201683044434, 1.0, 5.1432929039001465]\n"
     ]
    }
   ],
   "source": [
    "import collections\n",
    "cnt = collections.Counter(y_tr)\n",
    "max_c = max(cnt.values())\n",
    "weights = torch.tensor([max_c/cnt[i] for i in range(4)], dtype=torch.float32)\n",
    "print(\"class weights:\", weights.tolist())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5cbb078b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using cpu\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(\"Using\", device)          # will print “cpu” on your machine\n",
    "\n",
    "model = FourClassNet().to(device)\n",
    "loss_fn = nn.CrossEntropyLoss(weight=weights.to(device))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8c46204e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\astei\\AppData\\Local\\Temp\\ipykernel_5616\\2962186689.py:17: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "  xb, yb = xb.to(device), torch.tensor(yb).to(device)\n",
      "C:\\Users\\astei\\AppData\\Local\\Temp\\ipykernel_5616\\2962186689.py:7: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.detach().clone() or sourceTensor.detach().clone().requires_grad_(True), rather than torch.tensor(sourceTensor).\n",
      "  xb, yb = xb.to(device), torch.tensor(yb).to(device)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch 00  val acc 0.803\n",
      "epoch 01  val acc 0.836\n",
      "epoch 02  val acc 0.854\n",
      "epoch 03  val acc 0.885\n",
      "epoch 04  val acc 0.896\n",
      "epoch 05  val acc 0.891\n",
      "epoch 06  val acc 0.885\n",
      "epoch 07  val acc 0.896\n",
      "epoch 08  val acc 0.850\n",
      "epoch 09  val acc 0.868\n",
      "epoch 10  val acc 0.886\n",
      "epoch 11  val acc 0.888\n",
      "epoch 12  val acc 0.890\n",
      "epoch 13  val acc 0.883\n",
      "epoch 14  val acc 0.880\n",
      "epoch 15  val acc 0.874\n",
      "epoch 16  val acc 0.892\n",
      "epoch 17  val acc 0.897\n",
      "epoch 18  val acc 0.900\n",
      "epoch 19  val acc 0.904\n",
      "epoch 20  val acc 0.903\n",
      "epoch 21  val acc 0.899\n",
      "epoch 22  val acc 0.902\n",
      "epoch 23  val acc 0.903\n",
      "epoch 24  val acc 0.902\n"
     ]
    }
   ],
   "source": [
    "opt     = torch.optim.Adam(model.parameters(), lr=1e-3)\n",
    "\n",
    "def accuracy(loader):\n",
    "    model.eval(); correct=total=0\n",
    "    with torch.no_grad():\n",
    "        for xb,yb in loader:\n",
    "            xb, yb = xb.to(device), torch.tensor(yb).to(device)\n",
    "            pred = model(xb).argmax(1)\n",
    "            correct += (pred==yb).sum().item(); total += yb.numel()\n",
    "    return correct/total\n",
    "\n",
    "train_acc_hist = []\n",
    "\n",
    "for epoch in range(25):\n",
    "    model.train()\n",
    "    for xb,yb in train_loader:\n",
    "        xb, yb = xb.to(device), torch.tensor(yb).to(device)\n",
    "        opt.zero_grad()\n",
    "        loss = loss_fn(model(xb), yb); loss.backward(); opt.step()\n",
    "    train_acc_hist.append(accuracy(val_loader))\n",
    "    print(f\"epoch {epoch:02d}  val acc {accuracy(val_loader):.3f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cf16b6e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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q2gunIFiAEVERERW0Vw4gGIXHhEREZGFmIEiIiIiq2gunIFiAEVERETW0Vx3GgN24RERERFZiBkoIiIisorGLjwiIiIiy2gMoIiIiIgso7lwAMUaKCIiIiILMQNFRERE1tFcdxQeAygiIiKyisYuPCIiIiIyFzNQREREZBXNhTNQDKCIiIjIKhpsDKAcuAiKXXhEREREFmIGioiIiKyisQuPiIiIyEIapzEgimZhiyLw9va2dzNcQujzV/ZugstJ45XE3k1wKZGvdfZuAlGsYgBFREREVtHYhUdERERkGY0BFBEREZFlNO3NYsvxjorTGBAREZFDmD59OgoWLKjqc2UpVaoU1q9fb9j+4sULdOrUCT4+PvDy8kKjRo1w9+5dk3PcuHEDtWvXRrJkyeDr64s+ffrg1SvL61AZQBEREZENGSjNhsWy58uUKRPGjh2LI0eO4PDhw6hUqRLq1auH06dPq+09evTAH3/8gWXLlmHnzp24desWGjZsaDg+MjJSBU8RERHYt28fFixYgPnz52Pw4MGWv3adTsehEWQiNDQUKVOmxN8hDzkKL55wFF784yi8+MVRePH7OzxDulR4/PhxnP0OD/33cyJr1+Vw90hu9Xkiw5/iyuTGNrU1TZo0GD9+PBo3box06dJhyZIl6ntx7tw55MmTB/v378eHH36oslV16tRRgZWfn5/aZ8aMGejXrx/u3buHJEnM/73ADBQRERHZVWhoqMkSHh7+3mMkm/TLL7/g6dOnqitPslIvX75ElSpVDPvkzp0bgYGBKoAS8rVAgQKG4ElUr15dPac+i2UuBlBERERkFc2m7rv/RvAFBASojJZ+GTNmzFuf8+TJk6q+ycPDAx06dMCqVauQN29e3LlzR2WQUqVKZbK/BEuyTchX4+BJv12/zRIchUdERER2HYUXHBxs0oUnwdHb5MqVC8ePH1fdfsuXL0fLli1VvVN8YwBFREREduX976g6c0iWKXv27Or7okWL4tChQ/j+++/x6aefquLwR48emWShZBSev7+/+l6+Hjx40OR8+lF6+n3MxS48IiIisoqbm2bzYqvXr1+rmikJphInToytW7catp0/f15NWyA1UkK+ShdgSEiIYZ/Nmzer4E26AS3BDBQRERE5xESa/fv3R82aNVVh+JMnT9SIux07dmDjxo2qdqpNmzbo2bOnGpknQVGX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rXYREREROU8GavDgweqeMZKJkqzTypUrcf78edW1J/eWISIiIteg/bvYcrzLZKDq1auHP/74Q92sT27AJwHV2bNn1bqqVavGTSuJiIgowdFceBSeVfNAlS1bFps3b4791hARERE580Sahw8fVpknfV1U0aJFY7NdRERElMC5aW8WW453mQDq5s2baNq0Kfbu3YtUqVKpdY8ePcJHH32EX375BZkyZYqLdhIREVECo9nYDefIXXgW10C1bdtWTVcg2acHDx6oRb6XgnLZRkREROTsLM5A7dy5E/v27UOuXLkM6+T7KVOmqNooIiIich2a4yaR4jeACggIiHHCTLlHXoYMGWKrXURERJTAaezCM9/48ePRpUsXVUSuJ99369YN3377bWy3j4iIiBJ4EbmbDYtTZ6BSp05tEiU+ffoUJUuWRKJEbw5/9eqV+v6LL75A/fr14661RERERI4SQE2aNCnuW0JEREQORXPhLjyzAii5dQsRERGRMc2Fb+Vi9USa4sWLF4iIiDBZ5+3tbWubiIiIiJwrgJL6p379+mHp0qW4f/9+jKPxiIiIyPm5aZpabDneZUbh9e3bF9u2bcP06dPh4eGB2bNnY9iwYWoKg4ULF8ZNK4mIiCjB0TTbF5fJQP3xxx8qUKpQoQJat26tJs/Mnj07goKCsHjxYjRr1ixuWkpERETkqBkouXVL1qxZDfVO8liUKVMGu3btiv0WEhERUYIehafZsLhMACXB09WrV9X3uXPnVrVQ+syU/ubCRERE5Pw0F+7CsziAkm67EydOqO+/+uorTJ06FZ6enujRowf69OkTF20kIiIicuwaKAmU9KpUqYJz587hyJEjqg6qYMGCsd0+IiIiSqDcXHgUnk3zQAkpHpeFiIiIXItmYzecA8dP5gVQkydPNvuEXbt2taU9RERE5CA03srl3SZOnGj2hWAARURERM7OrABKP+qOXIu7m6YWintpvJLYuwkuJ3XxzvZugku596f5PRlkG51OF68j0dxsPN5ROXLbiYiIyIXmgRozZgyKFy+OFClSwNfXF/Xr18f58+ej3ae3U6dO8PHxgZeXFxo1aoS7d++a7HPjxg3Url0byZIlU+eRWQRevXplUVsYQBEREZFD2LlzpwqO/vzzT2zevBkvX75EtWrV1H16jWcLkLkply1bpva/desWGjZsaHLPXgmeIiIi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",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "         hit      0.933     0.926     0.929       270\n",
      "      squeak      0.720     0.720     0.720        50\n",
      " commentator      0.932     0.974     0.952       422\n",
      "       other      0.708     0.561     0.626        82\n",
      "\n",
      "    accuracy                          0.902       824\n",
      "   macro avg      0.823     0.795     0.807       824\n",
      "weighted avg      0.897     0.902     0.898       824\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, classification_report\n",
    "\n",
    "model.eval(); preds, truths = [], []\n",
    "with torch.no_grad():\n",
    "    for xb, yb in val_loader:\n",
    "        preds.extend(model(xb.to(device)).argmax(1).cpu())\n",
    "        truths.extend(yb)\n",
    "\n",
    "cm = confusion_matrix(truths, preds, labels=range(4))\n",
    "ConfusionMatrixDisplay(cm, display_labels=[\"hit\",\"squeak\",\"commentator\",\"other\"])\\\n",
    "    .plot(cmap=\"Blues\", values_format=\"d\")\n",
    "plt.title(\"Confusion matrix\"); plt.show()\n",
    "\n",
    "print(classification_report(truths, preds,\n",
    "      target_names=[\"hit\",\"squeak\",\"commentator\",\"other\"], digits=3))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ebde9242",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "                <audio  controls=\"controls\" >\n",
       "                    <source src=\"data:audio/wav;base64,\" type=\"audio/wav\" />\n",
       "                    Your browser does not support the audio element.\n",
       "                </audio>\n",
       "              "
      ],
      "text/plain": [
       "<IPython.lib.display.Audio object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model probabilities:\n",
      "  hit         : 100.00%\n",
      "  squeak      : 0.00%\n",
      "  commentator : 0.00%\n",
      "  other       : 0.00%\n",
      "True label: hit\n"
     ]
    }
   ],
   "source": [
    "import random, IPython.display as ipd, torch.nn.functional as F, matplotlib.pyplot as plt\n",
    "\n",
    "# pick a random validation row\n",
    "val_pos   = random.randrange(len(X_va))      # position inside val list\n",
    "row_idx   = idx_va[val_pos]                  # original DataFrame index\n",
    "row       = all_df.loc[row_idx]\n",
    "wav_path  = row.wav_path\n",
    "true_lab  = row.label4\n",
    "\n",
    "# load & play\n",
    "y_sig, sr = librosa.load(wav_path, sr=None)\n",
    "display(ipd.Audio(y_sig, rate=sr))\n",
    "\n",
    "plt.figure(figsize=(6,2))\n",
    "librosa.display.waveshow(y_sig, sr=sr)\n",
    "plt.title(f\"Waveform · true label = {true_lab}\")\n",
    "plt.show()\n",
    "\n",
    "# features → tensor\n",
    "feat = torch.tensor(pad(mfcc_stack(y_sig, sr)), dtype=torch.float32)[None].to(device)\n",
    "\n",
    "# get probabilities\n",
    "probs = F.softmax(model(feat), dim=1).detach().cpu().numpy()[0]\n",
    "\n",
    "print(\"Model probabilities:\")\n",
    "for cls, p in zip([\"hit\",\"squeak\",\"commentator\",\"other\"], probs):\n",
    "    print(f\"  {cls:12s}: {p:5.2%}\")\n",
    "print(\"True label:\", true_lab)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "bcd4f1c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved to ..\\models\\acoustic_classifier.pth\n"
     ]
    }
   ],
   "source": [
    "import pathlib as pl\n",
    "MODEL_DIR = pl.Path(\"../models\"); MODEL_DIR.mkdir(exist_ok=True)\n",
    "torch.save(model.state_dict(), MODEL_DIR / \"acoustic_classifier.pth\")\n",
    "print(\"Model saved to\", MODEL_DIR / \"acoustic_classifier.pth\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7c621e0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

-- PATH: quick_prepare.ps1 --
<#
  Usage
  -----
  .\quick_prepare.ps1  path\to\match.mp4        # extract, slice, then open UI
  .\quick_prepare.ps1  path\to\match.mp4 -NoUI  # just build the clips/CSV
#>

param(
    [Parameter(Mandatory = $true, Position = 0)]
    [string]$Video,          # full-length MP4/MKV

    [switch]$NoUI            # if you add -NoUI then Streamlit wont be launched
)

$root   = $PSScriptRoot      # project root (same folder as this script)
$stem   = [IO.Path]::GetFileNameWithoutExtension($Video)

$wav    = Join-Path $root "data\audio\$stem.wav"
$clips  = Join-Path $root "data\clips\$stem"
$csv    = Join-Path $clips "slices.csv"

# make folders if they don’t exist
New-Item -ItemType Directory -Path (Split-Path $wav)  -Force | Out-Null
New-Item -ItemType Directory -Path $clips             -Force | Out-Null

# 1. extract WAV
if (-not (Test-Path $wav)) {
    python audio_labeling_tools.py extract --input "$Video" --output "$wav"
}

# 2. slice audio into wav files and also into mp4 files for easier labeling
python audio_labeling_tools.py slice `
    --input "$wav" `
    --video "$Video" `
    --output_dir "$clips" `
    --csv "$csv" `
    --method onset `
    --delta 0.2 `
    --export_video `
    --min_gap_ms 200 `
    --pre_ms 150 --post_ms 150   # this changes the duration of the audio clip before and after the ,,noise"

# 3. open labelling UI unless -NoUI was supplied
if (-not $NoUI) {
    streamlit run label_app.py
}

-- PATH: requirements.txt --
librosa>=0.10
soundfile>=0.12
numpy>=1.26
scipy>=1.12
tqdm>=4.66
opencv-python>=4.8
pandas>=2.1
scenedetect>=0.6
catboost>=1.2
torch>=2.0
torchvision>=0.15

-- PATH: video_models/__init__.py --
(binary file omitted)

-- PATH: video_models/ball_detector.py --
from .tracknet import BallTrackerNet
import torch
import cv2
import numpy as np
from scipy.spatial import distance
from tqdm import tqdm

class BallDetector:
    def __init__(self, path_model=None, device='cuda'):
        self.model = BallTrackerNet(input_channels=9, out_channels=256)
        self.device = device
        if path_model:
            self.model.load_state_dict(torch.load(path_model, map_location=device))
            self.model = self.model.to(device)
            self.model.eval()
        self.width = 640
        self.height = 360

    def infer_model(self, frames):
        """ Run pretrained model on a consecutive list of frames
        :params
            frames: list of consecutive video frames
        :return
            ball_track: list of detected ball points
        """
        ball_track = [(None, None)]*2
        prev_pred = [None, None]
        for num in tqdm(range(2, len(frames))):
            img = cv2.resize(frames[num], (self.width, self.height))
            img_prev = cv2.resize(frames[num-1], (self.width, self.height))
            img_preprev = cv2.resize(frames[num-2], (self.width, self.height))
            imgs = np.concatenate((img, img_prev, img_preprev), axis=2)
            imgs = imgs.astype(np.float32)/255.0
            imgs = np.rollaxis(imgs, 2, 0)
            inp = np.expand_dims(imgs, axis=0)

            out = self.model(torch.from_numpy(inp).float().to(self.device))
            output = out.argmax(dim=1).detach().cpu().numpy()
            x_pred, y_pred = self.postprocess(output, prev_pred)
            prev_pred = [x_pred, y_pred]
            ball_track.append((x_pred, y_pred))
        return ball_track

    def postprocess(self, feature_map, prev_pred, scale=2, max_dist=80):
        """
        :params
            feature_map: feature map with shape (1,360,640)
            prev_pred: [x,y] coordinates of ball prediction from previous frame
            scale: scale for conversion to original shape (720,1280)
            max_dist: maximum distance from previous ball detection to remove outliers
        :return
            x,y ball coordinates
        """
        feature_map *= 255
        feature_map = feature_map.reshape((self.height, self.width))
        feature_map = feature_map.astype(np.uint8)
        ret, heatmap = cv2.threshold(feature_map, 127, 255, cv2.THRESH_BINARY)
        circles = cv2.HoughCircles(heatmap, cv2.HOUGH_GRADIENT, dp=1, minDist=1, param1=50, param2=2, minRadius=2,
                                   maxRadius=7)
        x, y = None, None
        if circles is not None:
            if prev_pred[0]:
                for i in range(len(circles[0])):
                    x_temp = circles[0][i][0]*scale
                    y_temp = circles[0][i][1]*scale
                    dist = distance.euclidean((x_temp, y_temp), prev_pred)
                    if dist < max_dist:
                        x, y = x_temp, y_temp
                        break                
            else:
                x = circles[0][0][0]*scale
                y = circles[0][0][1]*scale
        return x, y

-- PATH: video_models/bounce_detector.py --
import catboost as ctb
import pandas as pd
import numpy as np
from scipy.interpolate import CubicSpline
from scipy.spatial import distance

class BounceDetector:
    def __init__(self, path_model=None):
        self.model = ctb.CatBoostRegressor()
        self.threshold = 0.45
        if path_model:
            self.load_model(path_model)
        
    def load_model(self, path_model):
        self.model.load_model(path_model)
    
    def prepare_features(self, x_ball, y_ball):
        labels = pd.DataFrame({'frame': range(len(x_ball)), 'x-coordinate': x_ball, 'y-coordinate': y_ball})
        
        num = 3
        eps = 1e-15
        for i in range(1, num):
            labels['x_lag_{}'.format(i)] = labels['x-coordinate'].shift(i)
            labels['x_lag_inv_{}'.format(i)] = labels['x-coordinate'].shift(-i)
            labels['y_lag_{}'.format(i)] = labels['y-coordinate'].shift(i)
            labels['y_lag_inv_{}'.format(i)] = labels['y-coordinate'].shift(-i) 
            labels['x_diff_{}'.format(i)] = abs(labels['x_lag_{}'.format(i)] - labels['x-coordinate'])
            labels['y_diff_{}'.format(i)] = labels['y_lag_{}'.format(i)] - labels['y-coordinate']
            labels['x_diff_inv_{}'.format(i)] = abs(labels['x_lag_inv_{}'.format(i)] - labels['x-coordinate'])
            labels['y_diff_inv_{}'.format(i)] = labels['y_lag_inv_{}'.format(i)] - labels['y-coordinate']
            labels['x_div_{}'.format(i)] = abs(labels['x_diff_{}'.format(i)]/(labels['x_diff_inv_{}'.format(i)] + eps))
            labels['y_div_{}'.format(i)] = labels['y_diff_{}'.format(i)]/(labels['y_diff_inv_{}'.format(i)] + eps)

        for i in range(1, num):
            labels = labels[labels['x_lag_{}'.format(i)].notna()]
            labels = labels[labels['x_lag_inv_{}'.format(i)].notna()]
        labels = labels[labels['x-coordinate'].notna()] 
        
        colnames_x = ['x_diff_{}'.format(i) for i in range(1, num)] + \
                     ['x_diff_inv_{}'.format(i) for i in range(1, num)] + \
                     ['x_div_{}'.format(i) for i in range(1, num)]
        colnames_y = ['y_diff_{}'.format(i) for i in range(1, num)] + \
                     ['y_diff_inv_{}'.format(i) for i in range(1, num)] + \
                     ['y_div_{}'.format(i) for i in range(1, num)]
        colnames = colnames_x + colnames_y

        features = labels[colnames]
        return features, list(labels['frame'])
    
    def predict(self, x_ball, y_ball, smooth=True):
        if smooth:
            x_ball, y_ball = self.smooth_predictions(x_ball, y_ball)
        features, num_frames = self.prepare_features(x_ball, y_ball)
        preds = self.model.predict(features)
        ind_bounce = np.where(preds > self.threshold)[0]
        if len(ind_bounce) > 0:
            ind_bounce = self.postprocess(ind_bounce, preds)
        frames_bounce = [num_frames[x] for x in ind_bounce]
        return set(frames_bounce)
    
    def smooth_predictions(self, x_ball, y_ball):
        is_none = [int(x is None) for x in x_ball]
        interp = 5
        counter = 0
        for num in range(interp, len(x_ball)-1):
            if not x_ball[num] and sum(is_none[num-interp:num]) == 0 and counter < 3:
                x_ext, y_ext = self.extrapolate(x_ball[num-interp:num], y_ball[num-interp:num])
                x_ball[num] = x_ext
                y_ball[num] = y_ext
                is_none[num] = 0
                if x_ball[num+1]:
                    dist = distance.euclidean((x_ext, y_ext), (x_ball[num+1], y_ball[num+1]))
                    if dist > 80:
                        x_ball[num+1], y_ball[num+1], is_none[num+1] = None, None, 1
                counter += 1
            else:
                counter = 0  
        return x_ball, y_ball

    def extrapolate(self, x_coords, y_coords):
        xs = list(range(len(x_coords)))
        func_x = CubicSpline(xs, x_coords, bc_type='natural')
        x_ext = func_x(len(x_coords))
        func_y = CubicSpline(xs, y_coords, bc_type='natural')
        y_ext = func_y(len(x_coords))
        return float(x_ext), float(y_ext)    

    def postprocess(self, ind_bounce, preds):
        ind_bounce_filtered = [ind_bounce[0]]
        for i in range(1, len(ind_bounce)):
            if (ind_bounce[i] - ind_bounce[i-1]) != 1:
                cur_ind = ind_bounce[i]
                ind_bounce_filtered.append(cur_ind)
            elif preds[ind_bounce[i]] > preds[ind_bounce[i-1]]:
                ind_bounce_filtered[-1] = ind_bounce[i]
        return ind_bounce_filtered



-- PATH: video_models/court_detection_net.py --
import cv2
import numpy as np
import torch
from .tracknet import BallTrackerNet
import torch.nn.functional as F
from tqdm import tqdm
from .postprocess import refine_kps
from .homography import get_trans_matrix, refer_kps

class CourtDetectorNet():
    def __init__(self, path_model=None,  device='cuda'):
        self.model = BallTrackerNet(out_channels=15)
        self.device = device
        if path_model:
            self.model.load_state_dict(torch.load(path_model, map_location=device))
            self.model = self.model.to(device)
            self.model.eval()
            
    def infer_model(self, frames):
        output_width = 640
        output_height = 360
        scale = 2
        
        kps_res = []
        matrixes_res = []
        for num_frame, image in enumerate(tqdm(frames)):
            img = cv2.resize(image, (output_width, output_height))
            inp = (img.astype(np.float32) / 255.)
            inp = torch.tensor(np.rollaxis(inp, 2, 0))
            inp = inp.unsqueeze(0)

            out = self.model(inp.float().to(self.device))[0]
            pred = F.sigmoid(out).detach().cpu().numpy()

            points = []
            for kps_num in range(14):
                heatmap = (pred[kps_num]*255).astype(np.uint8)
                ret, heatmap = cv2.threshold(heatmap, 170, 255, cv2.THRESH_BINARY)
                circles = cv2.HoughCircles(heatmap, cv2.HOUGH_GRADIENT, dp=1, minDist=20, param1=50, param2=2,
                                           minRadius=10, maxRadius=25)
                if circles is not None:
                    x_pred = circles[0][0][0]*scale
                    y_pred = circles[0][0][1]*scale
                    if kps_num not in [8, 12, 9]:
                        x_pred, y_pred = refine_kps(image, int(y_pred), int(x_pred), crop_size=40)
                    points.append((x_pred, y_pred))                
                else:
                    points.append(None)

            matrix_trans = get_trans_matrix(points) 
            points = None
            if matrix_trans is not None:
                points = cv2.perspectiveTransform(refer_kps, matrix_trans)
                matrix_trans = cv2.invert(matrix_trans)[1]
            kps_res.append(points)
            matrixes_res.append(matrix_trans)
            
        return matrixes_res, kps_res    

-- PATH: video_models/court_reference.py --
import cv2
import numpy as np
import matplotlib.pyplot as plt


class CourtReference:
    """
    Court reference model
    """
    def __init__(self):
        self.baseline_top = ((286, 561), (1379, 561))
        self.baseline_bottom = ((286, 2935), (1379, 2935))
        self.net = ((286, 1748), (1379, 1748))
        self.left_court_line = ((286, 561), (286, 2935))
        self.right_court_line = ((1379, 561), (1379, 2935))
        self.left_inner_line = ((423, 561), (423, 2935))
        self.right_inner_line = ((1242, 561), (1242, 2935))
        self.middle_line = ((832, 1110), (832, 2386))
        self.top_inner_line = ((423, 1110), (1242, 1110))
        self.bottom_inner_line = ((423, 2386), (1242, 2386))
        self.top_extra_part = (832.5, 580)
        self.bottom_extra_part = (832.5, 2910)
        
        self.key_points = [*self.baseline_top, *self.baseline_bottom, 
                          *self.left_inner_line, *self.right_inner_line,
                          *self.top_inner_line, *self.bottom_inner_line,
                          *self.middle_line]
        
        self.border_points = [*self.baseline_top, *self.baseline_bottom[::-1]]

        self.court_conf = {1: [*self.baseline_top, *self.baseline_bottom],
                           2: [self.left_inner_line[0], self.right_inner_line[0], self.left_inner_line[1],
                               self.right_inner_line[1]],
                           3: [self.left_inner_line[0], self.right_court_line[0], self.left_inner_line[1],
                               self.right_court_line[1]],
                           4: [self.left_court_line[0], self.right_inner_line[0], self.left_court_line[1],
                               self.right_inner_line[1]],
                           5: [*self.top_inner_line, *self.bottom_inner_line],
                           6: [*self.top_inner_line, self.left_inner_line[1], self.right_inner_line[1]],
                           7: [self.left_inner_line[0], self.right_inner_line[0], *self.bottom_inner_line],
                           8: [self.right_inner_line[0], self.right_court_line[0], self.right_inner_line[1],
                               self.right_court_line[1]],
                           9: [self.left_court_line[0], self.left_inner_line[0], self.left_court_line[1],
                               self.left_inner_line[1]],
                           10: [self.top_inner_line[0], self.middle_line[0], self.bottom_inner_line[0],
                                self.middle_line[1]],
                           11: [self.middle_line[0], self.top_inner_line[1], self.middle_line[1],
                                self.bottom_inner_line[1]],
                           12: [*self.bottom_inner_line, self.left_inner_line[1], self.right_inner_line[1]]}
        self.line_width = 1
        self.court_width = 1117
        self.court_height = 2408
        self.top_bottom_border = 549
        self.right_left_border = 274
        self.court_total_width = self.court_width + self.right_left_border * 2
        self.court_total_height = self.court_height + self.top_bottom_border * 2
        self.court = self.build_court_reference()

        # self.court = cv2.cvtColor(cv2.imread('court_configurations/court_reference.png'), cv2.COLOR_BGR2GRAY)

    def build_court_reference(self):
        """
        Create court reference image using the lines positions
        """
        court = np.zeros((self.court_height + 2 * self.top_bottom_border, self.court_width + 2 * self.right_left_border), dtype=np.uint8)
        cv2.line(court, *self.baseline_top, 1, self.line_width)
        cv2.line(court, *self.baseline_bottom, 1, self.line_width)
        cv2.line(court, *self.net, 1, self.line_width)
        cv2.line(court, *self.top_inner_line, 1, self.line_width)
        cv2.line(court, *self.bottom_inner_line, 1, self.line_width)
        cv2.line(court, *self.left_court_line, 1, self.line_width)
        cv2.line(court, *self.right_court_line, 1, self.line_width)
        cv2.line(court, *self.left_inner_line, 1, self.line_width)
        cv2.line(court, *self.right_inner_line, 1, self.line_width)
        cv2.line(court, *self.middle_line, 1, self.line_width)
        court = cv2.dilate(court, np.ones((5, 5), dtype=np.uint8))
        # court = cv2.dilate(court, np.ones((7, 7), dtype=np.uint8))
        # plt.imsave('court_configurations/court_reference.png', court, cmap='gray')
        # self.court = court
        return court

    def get_important_lines(self):
        """
        Returns all lines of the court
        """
        lines = [*self.baseline_top, *self.baseline_bottom, *self.net, *self.left_court_line, *self.right_court_line,
                 *self.left_inner_line, *self.right_inner_line, *self.middle_line,
                 *self.top_inner_line, *self.bottom_inner_line]
        return lines

    def get_extra_parts(self):
        parts = [self.top_extra_part, self.bottom_extra_part]
        return parts

    def save_all_court_configurations(self):
        """
        Create all configurations of 4 points on court reference
        """
        for i, conf in self.court_conf.items():
            c = cv2.cvtColor(255 - self.court, cv2.COLOR_GRAY2BGR)
            for p in conf:
                c = cv2.circle(c, p, 15, (0, 0, 255), 30)
            cv2.imwrite(f'court_configurations/court_conf_{i}.png', c)

    def get_court_mask(self, mask_type=0):
        """
        Get mask of the court
        """
        mask = np.ones_like(self.court)
        if mask_type == 1:  # Bottom half court
            # mask[:self.net[0][1] - 1000, :] = 0
            mask[:self.net[0][1], :] = 0
        elif mask_type == 2:  # Top half court
            mask[self.net[0][1]:, :] = 0
        elif mask_type == 3: # court without margins
            mask[:self.baseline_top[0][1], :] = 0
            mask[self.baseline_bottom[0][1]:, :] = 0
            mask[:, :self.left_court_line[0][0]] = 0
            mask[:, self.right_court_line[0][0]:] = 0
        return mask


if __name__ == '__main__':
    c = CourtReference()
    c.build_court_reference()
-- PATH: video_models/homography.py --
from .court_reference import CourtReference
import numpy as np
import cv2
from scipy.spatial import distance

court_ref = CourtReference()
refer_kps = np.array(court_ref.key_points, dtype=np.float32).reshape((-1, 1, 2))

court_conf_ind = {}
for i in range(len(court_ref.court_conf)):
    conf = court_ref.court_conf[i+1]
    inds = []
    for j in range(4):
        inds.append(court_ref.key_points.index(conf[j]))
    court_conf_ind[i+1] = inds

def get_trans_matrix(points):
    """
    Determine the best homography matrix from court points
    """
    matrix_trans = None
    dist_max = np.Inf
    for conf_ind in range(1, 13):
        conf = court_ref.court_conf[conf_ind]

        inds = court_conf_ind[conf_ind]
        inters = [points[inds[0]], points[inds[1]], points[inds[2]], points[inds[3]]]
        if None not in inters:
            matrix, _ = cv2.findHomography(np.float32(conf), np.float32(inters), method=0)
            trans_kps = cv2.perspectiveTransform(refer_kps, matrix).squeeze(1)
            dists = []
            for i in range(12):
                if i not in inds and points[i] is not None:
                    dists.append(distance.euclidean(points[i], trans_kps[i]))
            dist_median = np.mean(dists)
            if dist_median < dist_max:
                matrix_trans = matrix
                dist_max = dist_median
    return matrix_trans 




-- PATH: video_models/person_detector.py --
import torchvision
import cv2
import torch
from .court_reference import CourtReference
from scipy import signal
import numpy as np
from scipy.spatial import distance
from tqdm import tqdm

class PersonDetector():
    def __init__(self, dtype=torch.FloatTensor):
        self.detection_model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)
        self.detection_model = self.detection_model.to(dtype)
        self.detection_model.eval()
        self.dtype = dtype
        self.court_ref = CourtReference()
        self.ref_top_court = self.court_ref.get_court_mask(2)
        self.ref_bottom_court = self.court_ref.get_court_mask(1)
        self.point_person_top = None
        self.point_person_bottom = None
        self.counter_top = 0
        self.counter_bottom = 0

        
    def detect(self, image, person_min_score=0.85): 
        PERSON_LABEL = 1
        frame_tensor = image.transpose((2, 0, 1)) / 255
        frame_tensor = torch.from_numpy(frame_tensor).unsqueeze(0).float().to(self.dtype)
        
        with torch.no_grad():
            preds = self.detection_model(frame_tensor)
            
        persons_boxes = []
        probs = []
        for box, label, score in zip(preds[0]['boxes'][:], preds[0]['labels'], preds[0]['scores']):
            if label == PERSON_LABEL and score > person_min_score:    
                persons_boxes.append(box.detach().cpu().numpy())
                probs.append(score.detach().cpu().numpy())
        return persons_boxes, probs
    
    def detect_top_and_bottom_players(self, image, inv_matrix, filter_players=False):
        matrix = cv2.invert(inv_matrix)[1]
        mask_top_court = cv2.warpPerspective(self.ref_top_court, matrix, image.shape[1::-1])
        mask_bottom_court = cv2.warpPerspective(self.ref_bottom_court, matrix, image.shape[1::-1])
        person_bboxes_top, person_bboxes_bottom = [], []

        bboxes, probs = self.detect(image, person_min_score=0.85)
        if len(bboxes) > 0:
            person_points = [[int((bbox[2] + bbox[0]) / 2), int(bbox[3])] for bbox in bboxes]
            person_bboxes = list(zip(bboxes, person_points))
  
            person_bboxes_top = [pt for pt in person_bboxes if mask_top_court[pt[1][1]-1, pt[1][0]] == 1]
            person_bboxes_bottom = [pt for pt in person_bboxes if mask_bottom_court[pt[1][1] - 1, pt[1][0]] == 1]

            if filter_players:
                person_bboxes_top, person_bboxes_bottom = self.filter_players(person_bboxes_top, person_bboxes_bottom,
                                                                              matrix)
        return person_bboxes_top, person_bboxes_bottom

    def filter_players(self, person_bboxes_top, person_bboxes_bottom, matrix):
        """
        Leave one person at the top and bottom of the tennis court
        """
        refer_kps = np.array(self.court_ref.key_points[12:], dtype=np.float32).reshape((-1, 1, 2))
        trans_kps = cv2.perspectiveTransform(refer_kps, matrix)
        center_top_court = trans_kps[0][0]
        center_bottom_court = trans_kps[1][0]
        if len(person_bboxes_top) > 1:
            dists = [distance.euclidean(x[1], center_top_court) for x in person_bboxes_top]
            ind = dists.index(min(dists))
            person_bboxes_top = [person_bboxes_top[ind]]
        if len(person_bboxes_bottom) > 1:
            dists = [distance.euclidean(x[1], center_bottom_court) for x in person_bboxes_bottom]
            ind = dists.index(min(dists))
            person_bboxes_bottom = [person_bboxes_bottom[ind]]
        return person_bboxes_top, person_bboxes_bottom
    
    def track_players(self, frames, matrix_all, filter_players=False):
        persons_top = []
        persons_bottom = []
        min_len = min(len(frames), len(matrix_all))
        for num_frame in tqdm(range(min_len)):
            img = frames[num_frame]
            if matrix_all[num_frame] is not None:
                inv_matrix = matrix_all[num_frame]
                person_top, person_bottom = self.detect_top_and_bottom_players(img, inv_matrix, filter_players)
            else:
                person_top, person_bottom = [], []
            persons_top.append(person_top)
            persons_bottom.append(person_bottom)
        return persons_top, persons_bottom    



-- PATH: video_models/postprocess.py --
import cv2
import numpy as np
from sympy import Line
from scipy.spatial import distance
from sympy.geometry.point import Point2D


def line_intersection(line1, line2):
    """
    Find 2 lines intersection point
    """
    l1 = Line((line1[0], line1[1]), (line1[2], line1[3]))
    l2 = Line((line2[0], line2[1]), (line2[2], line2[3]))

    intersection = l1.intersection(l2)
    point = None
    if len(intersection) > 0:
        if isinstance(intersection[0], Point2D):
            point = intersection[0].coordinates
    return point 

def refine_kps(img, x_ct, y_ct, crop_size=40):
    refined_x_ct, refined_y_ct = x_ct, y_ct
    
    img_height, img_width = img.shape[:2]
    x_min = max(x_ct-crop_size, 0)
    x_max = min(img_height, x_ct+crop_size)
    y_min = max(y_ct-crop_size, 0)
    y_max = min(img_width, y_ct+crop_size)

    img_crop = img[x_min:x_max, y_min:y_max]
    lines = detect_lines(img_crop)
    # print('lines = ', lines)
    
    if len(lines) > 1:
        lines = merge_lines(lines)
        if len(lines) == 2:
            inters = line_intersection(lines[0], lines[1])
            if inters:
                new_x_ct = int(inters[1])
                new_y_ct = int(inters[0])
                if new_x_ct > 0 and new_x_ct < img_crop.shape[0] and new_y_ct > 0 and new_y_ct < img_crop.shape[1]:
                    refined_x_ct = x_min + new_x_ct
                    refined_y_ct = y_min + new_y_ct                    
    return refined_y_ct, refined_x_ct

def detect_lines(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray = cv2.threshold(gray, 155, 255, cv2.THRESH_BINARY)[1]
    lines = cv2.HoughLinesP(gray, 1, np.pi / 180, 30, minLineLength=10, maxLineGap=30)
    lines = np.squeeze(lines) 
    if len(lines.shape) > 0:
        if len(lines) == 4 and not isinstance(lines[0], np.ndarray):
            lines = [lines]
    else:
        lines = []
    return lines

def merge_lines(lines):
    lines = sorted(lines, key=lambda item: item[0])
    mask = [True] * len(lines)
    new_lines = []

    for i, line in enumerate(lines):
        if mask[i]:
            for j, s_line in enumerate(lines[i + 1:]):
                if mask[i + j + 1]:
                    x1, y1, x2, y2 = line
                    x3, y3, x4, y4 = s_line
                    dist1 = distance.euclidean((x1, y1), (x3, y3))
                    dist2 = distance.euclidean((x2, y2), (x4, y4))
                    if dist1 < 20 and dist2 < 20:
                        line = np.array([int((x1+x3)/2), int((y1+y3)/2), int((x2+x4)/2), int((y2+y4)/2)])
                        mask[i + j + 1] = False
            new_lines.append(line)  
    return new_lines       


-- PATH: video_models/tracknet.py --
import torch.nn as nn
import torch

class ConvBlock(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size=3, pad=1, stride=1, bias=True):
        super().__init__()
        self.block = nn.Sequential(
            nn.Conv2d(in_channels, out_channels, kernel_size, stride=stride, padding=pad, bias=bias),
            nn.ReLU(),
            nn.BatchNorm2d(out_channels)
        )

    def forward(self, x):
        return self.block(x)

class BallTrackerNet(nn.Module):
    def __init__(self, input_channels=3, out_channels=14):
        super().__init__()
        self.out_channels = out_channels
        self.input_channels = input_channels

        self.conv1 = ConvBlock(in_channels=self.input_channels, out_channels=64)
        self.conv2 = ConvBlock(in_channels=64, out_channels=64)
        self.pool1 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv3 = ConvBlock(in_channels=64, out_channels=128)
        self.conv4 = ConvBlock(in_channels=128, out_channels=128)
        self.pool2 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv5 = ConvBlock(in_channels=128, out_channels=256)
        self.conv6 = ConvBlock(in_channels=256, out_channels=256)
        self.conv7 = ConvBlock(in_channels=256, out_channels=256)
        self.pool3 = nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv8 = ConvBlock(in_channels=256, out_channels=512)
        self.conv9 = ConvBlock(in_channels=512, out_channels=512)
        self.conv10 = ConvBlock(in_channels=512, out_channels=512)
        self.ups1 = nn.Upsample(scale_factor=2)
        self.conv11 = ConvBlock(in_channels=512, out_channels=256)
        self.conv12 = ConvBlock(in_channels=256, out_channels=256)
        self.conv13 = ConvBlock(in_channels=256, out_channels=256)
        self.ups2 = nn.Upsample(scale_factor=2)
        self.conv14 = ConvBlock(in_channels=256, out_channels=128)
        self.conv15 = ConvBlock(in_channels=128, out_channels=128)
        self.ups3 = nn.Upsample(scale_factor=2)
        self.conv16 = ConvBlock(in_channels=128, out_channels=64)
        self.conv17 = ConvBlock(in_channels=64, out_channels=64)
        self.conv18 = ConvBlock(in_channels=64, out_channels=self.out_channels)

        self._init_weights()
                  
    def forward(self, x):
        x = self.conv1(x)
        x = self.conv2(x)    
        x = self.pool1(x)
        x = self.conv3(x)
        x = self.conv4(x)
        x = self.pool2(x)
        x = self.conv5(x)
        x = self.conv6(x)
        x = self.conv7(x)
        x = self.pool3(x)
        x = self.conv8(x)
        x = self.conv9(x)
        x = self.conv10(x)
        x = self.ups1(x)
        x = self.conv11(x)
        x = self.conv12(x)
        x = self.conv13(x)
        x = self.ups2(x)
        x = self.conv14(x)
        x = self.conv15(x)
        x = self.ups3(x)
        x = self.conv16(x)
        x = self.conv17(x)
        x = self.conv18(x)
        return x
    
    def _init_weights(self):
        for module in self.modules():
            if isinstance(module, nn.Conv2d):
                nn.init.uniform_(module.weight, -0.05, 0.05)
                if module.bias is not None:
                    nn.init.constant_(module.bias, 0)

            elif isinstance(module, nn.BatchNorm2d):
                nn.init.constant_(module.weight, 1)
                nn.init.constant_(module.bias, 0)   

    
    
-- PATH: video_models/utils.py --
from scenedetect.video_manager import VideoManager
from scenedetect.scene_manager import SceneManager
from scenedetect.stats_manager import StatsManager
from scenedetect.detectors import ContentDetector

def scene_detect(path_video):
    """
    Split video to disjoint fragments based on color histograms
    """
    video_manager = VideoManager([path_video])
    stats_manager = StatsManager()
    scene_manager = SceneManager(stats_manager)
    scene_manager.add_detector(ContentDetector())
    base_timecode = video_manager.get_base_timecode()

    video_manager.set_downscale_factor()
    video_manager.start()
    scene_manager.detect_scenes(frame_source=video_manager)
    scene_list = scene_manager.get_scene_list(base_timecode)

    if scene_list == []:
        scene_list = [(video_manager.get_base_timecode(), video_manager.get_current_timecode())]
    scenes = [[x[0].frame_num, x[1].frame_num]for x in scene_list]    
    return scenes


